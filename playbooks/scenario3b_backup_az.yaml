---

- name: Scenario 3 - Backup per AZ
  hosts: localhost
  vars:
    prefix: scenario3b-
  tasks:
    - set_fact:
        prefix: "{{ (prefix + ( lookup('env', 'TASK_EXECUTOR_JOB_ID') | default(99999999 | random | to_uuid | hash('md5'), true) ) ) }}"

    - set_fact:
        volume_suffix: "{{ (prefix + '-test_volume_apimon') }}"
        snapshot_suffix: "{{ (prefix + '-test_snapshot_apimon') }}"
        backup_suffix: "{{ (prefix + '-test_backup_apimon') }}"

    - name: Rescue block
      block:
        - name: Get network facts
          os_networks_facts:
            name: admin_external_net

        - set_fact:
            network_azs: "{{ openstack_networks[0]['availability_zones'] }}"

        - name: "Create Volume in {{item}}"
          os_volume:
            state: present
            availability_zone: "{{ item }}"
            size: 10
            display_name: "{{ (item + '.' + volume_suffix) }}"
          loop: "{{ network_azs }}"

        - name: "Create Snapshot in {{item}}"
          os_volume_snapshot:
            state: present
            display_name: "{{ (item + '.' + snapshot_suffix) }}"
            volume: "{{ (item + '.' + volume_suffix) }}"
          loop: "{{ network_azs }}"

        - name: "Create Backup in {{item}}"
          vars:
            volume_name: "{{ (item + '.' + volume_suffix) }}"
            snapshot_name: "{{ (item + '.' + snapshot_suffix) }}"
            backup_name: "{{ (item + '.' + backup_suffix) }}"
          script: "create_backup.py {{volume_name}} {{snapshot_name}} {{backup_name}}"
          tags: 'service=block_storage'
          loop: "{{ network_azs }}"

        - name: "Restore Backup in {{item}}"
          vars:
            volume_name: "{{ (item + '.' + volume_suffix) }}"
            snapshot_name: "{{ (item + '.' + snapshot_suffix) }}"
            backup_name: "{{ (item + '.' + backup_suffix) }}"
          script: "restore_backup.py {{backup_name}} {{volume_name}} {{ (volume_name + 'new') }}"
          tags: 'service=block_storage'
          loop: "{{ network_azs }}"

      rescue:
        - name: "Get info about Backup in {{item}}"
          script: "get_backup_info.py {{ (item + '.' + backup_suffix) }}"
          register: "{{ ('backup_info_' + item) }}"
          tags: 'service=block_storage'
          loop: "{{ network_azs }}"

        - name: "Print Backup info in {{item}}"
          debug:
            var: "{{ ('backup_info_' + item + '.stdout') }}"
          loop: "{{ network_azs }}"

        - name: "Get info about Volume in {{item}}"
          script: "get_volume_info.py {{ (item + '.' + volume_suffix) }}"
          register: "{{ ('volume_info_' + item) }}"
          tags: 'service=block_storage'
          loop: "{{ network_azs }}"

        - name: "Print Volume info in {{item}}"
          debug:
            var: "{{ ('volume_info_' + item + '.stdout') }}"
          loop: "{{ network_azs }}"

      always:
        # If we failed - cleanup what we can
        - name: "Delete Backup in {{item}}"
          vars:
            backup_name: "{{ (item + '.' + backup_suffix) }}"
          script: "delete_backup.py {{backup_name}}"
          tags: 'service=block_storage'
          ignore_errors: True
          loop: "{{ network_azs }}"

        - name: "Delete original Snapshot in {{item}}"
          vars:
            volume_name: "{{ (item + '.' + volume_suffix) }}"
            snapshot_name: "{{ (item + '.' + snapshot_suffix) }}"
          os_volume_snapshot:
            state: absent
            display_name: "{{ snapshot_name }}"
            volume: "{{volume_name}}"
          ignore_errors: True
          loop: "{{ network_azs }}"

        - name: "Delete new Snapshot in {{item}}"
          vars:
            volume_name: "{{ (item + '.' + volume_suffix) }}"
            snapshot_name: "{{ (item + '.' + snapshot_suffix) }}"
          os_volume_snapshot:
            state: absent
            display_name: "{{ (snapshot_name + '_new') }}"
            volume: "{{volume_name}}"
          ignore_errors: True
          loop: "{{ network_azs }}"

        - name: "Delete Volume in {{item}}"
          vars:
            volume_name: "{{ (item + '.' + volume_suffix) }}"
          os_volume:
            state: absent
            display_name: "{{volume_name}}"
          ignore_errors: True
          loop: "{{ network_azs }}"
